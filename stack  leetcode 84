//maximal rectangle 

class Solution {
private:
    vector<int> nextSmallerElement(vector<int>& heights, int n) {

        vector<int> ans(n);
        stack<int> s;
        s.push(-1);

        for (int i = n - 1; i >= 0; i--) {
            while (s.top() != -1 && heights[s.top()] >= heights[i]) {
                s.pop();
            }

            ans[i] = s.top();
            s.push(i);
        }

        return ans;
    }

    vector<int> prevSmallerElement(vector<int>& heights, int n) {

        vector<int> ans(n);
        stack<int> s;
        s.push(-1);

        for (int i = 0; i < n; i++) {
            while (s.top() != -1 && heights[s.top()] >= heights[i]) {
                s.pop();
            }

            ans[i] = s.top();
            s.push(i);
        }

        return ans;
    }

    int largestRectangleArea(vector<int> heights) {

        int n = heights.size();

        vector<int> next(n);
        next = nextSmallerElement(heights, n);

        vector<int> prev(n);
        prev = prevSmallerElement(heights, n);

        int area = INT_MIN;

        for (int i = 0; i < n; i++) {
            int l = heights[i];

            if (next[i] == -1) {
                next[i] = n;
            }

            int b = next[i] - prev[i] - 1;

            int newarea = l * b;

            area = max(area, newarea);
        }

        return area;
    }

public:
    int maximalRectangle(vector<vector<char>>& matrix) {

        int n = matrix.size();
        int m = matrix[0].size();

        vector<int> heights(m, 0);
        for (int j = 0; j < m; j++) {
            heights[j] = matrix[0][j] - '0'; // convert char '0'/'1' to int
        }
        int area = largestRectangleArea(heights);

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {

                if (matrix[i][j] == '1') {
                    heights[j] += 1;
                } else {
                    heights[j] = 0;
                }
            }

            int newarea = largestRectangleArea(heights);
            area = max(area, newarea);
        }

        return area;
    }
}; 

//hello world
